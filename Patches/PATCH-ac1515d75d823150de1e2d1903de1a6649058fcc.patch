From 65616a76fc03f9a9de7db34835ef65f4c4d01a2b Mon Sep 17 00:00:00 2001
From: StiviiK <stefan.kuerzeder@gmail.com>
Date: Thu, 11 Feb 2016 21:08:50 +0100
Subject: [PATCH] CompanyVehicles can now be "parked" and respawned (Currently
 only for CompanyVehicles 'cause of testing purposes, TODO: should we use this
 system?) You can now close all in the SelfGUI opend GUI's via F2 (See TODO!)
 Changend some texts of the PlayerMouseMenu

---
 vrp/server/classes/Business/Company.lua            |  6 ++
 vrp/server/classes/Player/DatabasePlayer.lua       |  1 +
 vrp/server/classes/Vehicles/CompanyVehicle.lua     | 25 ++++++-
 vrp/server/classes/Vehicles/VehicleManager.lua     | 83 ++++++++++++++--------
 6 files changed, 119 insertions(+), 40 deletions(-)

diff --git a/vrp/server/classes/Business/Company.lua b/vrp/server/classes/Business/Company.lua
index 082d5af..e3abf5c 100644
--- a/vrp/server/classes/Business/Company.lua
+++ b/vrp/server/classes/Business/Company.lua
@@ -292,3 +292,9 @@ function Company:createDutyMarker()
     		end
     	)
 end
+
+function Company:respawnVehicles()
+    for i, v in pairs(self.m_Vehicles) do
+        v:respawn()
+    end
+end
diff --git a/vrp/server/classes/Player/DatabasePlayer.lua b/vrp/server/classes/Player/DatabasePlayer.lua
index 19bb9e2..24b2e90 100644
--- a/vrp/server/classes/Player/DatabasePlayer.lua
+++ b/vrp/server/classes/Player/DatabasePlayer.lua
@@ -235,6 +235,7 @@ function DatabasePlayer:setCompany(company)
 	if self:isActive() then
 		self:setPublicSync("CompanyId", company and company:getId() or 0)
 		self:setPublicSync("CompanyName", company and company:getName() or "")
+		self:setPrivateSync("CompanyRank", company:getPlayerRank(self) or 0)
 	end
 end
 
diff --git a/vrp/server/classes/Vehicles/CompanyVehicle.lua b/vrp/server/classes/Vehicles/CompanyVehicle.lua
index 7257d69..7494a78 100644
--- a/vrp/server/classes/Vehicles/CompanyVehicle.lua
+++ b/vrp/server/classes/Vehicles/CompanyVehicle.lua
@@ -38,10 +38,12 @@ function CompanyVehicle.convertVehicle(vehicle, Company)
 	return false
 end
 
-function CompanyVehicle:constructor(Id, company, color, health, posionType, tunings, mileage)
+function CompanyVehicle:constructor(Id, company, color, health, posionType, tunings, mileage, spawnPosition, spawnRotation)
   self.m_Id = Id
   self.m_Company = company
   self.m_PositionType = positionType or VehiclePositionType.World
+  self.m_SpawnPosition = spawnPosition or self:getPosition()
+  self.m_SpawnRotation = spawnRotation or self:getRotation()
   setElementData(self, "OwnerName", self.m_Company:getName())
 
   self:setHealth(health)
@@ -113,9 +115,13 @@ end
 
 function CompanyVehicle:save()
 	local tunings = getVehicleUpgrades(self) or {}
+	local posX, posY, posZ = getElementPosition(self)
+	local _, _, RotZ = getElementRotation(self)
+	local SpawnPosX, SpawnPosY, SpawnPosZ = self.m_SpawnPosition.x, self.m_SpawnPosition.y, self.m_SpawnPosition.z
+	local SpawnRotZ = self.m_SpawnRotation.z
 
-	return sql:queryExec("UPDATE ??_company_vehicles SET Company = ?, Tunings = ?, Mileage = ? WHERE Id = ?", sql:getPrefix(),
-		self.m_Company:getId(), toJSON(tunings), self:getMileage(), self.m_Id)
+	return sql:queryExec("UPDATE ??_company_vehicles SET PosX = ?, PosY = ?, PosZ = ?, SpawnPosX = ?, SpawnPosY = ?, SpawnPosZ = ?, Rotation = ?, SpawnRotation = ?, Company = ?, Tunings = ?, Mileage = ? WHERE Id = ?", sql:getPrefix(),
+		posX, posY, posZ, SpawnPosX, SpawnPosY, SpawnPosZ, RotZ, SpawnRotZ, self.m_Company:getId(), toJSON(tunings), self:getMileage(), self.m_Id)
 end
 
 function CompanyVehicle:hasKey(player)
@@ -143,4 +149,17 @@ end
 function CompanyVehicle:respawn()
 	-- Set inGarage flag and teleport to private dimension
 	self.m_LastUseTime = math.huge
+
+	-- Remove all from the Vehicle
+	for seat, occupant in pairs(getVehicleOccupants(self) or {}) do
+		removePedFromVehicle(occupant)
+	end
+
+	-- Spawn Vehicle at spawnPosition
+	fixVehicle(self)
+	self:setLocked(true)
+	self:setEngineState(false)
+
+	self:setPosition(self.m_SpawnPosition)
+	self:setRotation(self.m_SpawnRotation)
 end
diff --git a/vrp/server/classes/Vehicles/VehicleManager.lua b/vrp/server/classes/Vehicles/VehicleManager.lua
index 953e72b..e93a11b 100644
--- a/vrp/server/classes/Vehicles/VehicleManager.lua
+++ b/vrp/server/classes/Vehicles/VehicleManager.lua
@@ -19,7 +19,7 @@ function VehicleManager:constructor()
 	-- Add events
 	addRemoteEvents{"vehicleBuy", "vehicleLock", "vehicleRequestKeys", "vehicleAddKey", "vehicleRemoveKey",
 		"vehicleRepair", "vehicleRespawn", "vehicleDelete", "vehicleSell", "vehicleRequestInfo",
-		"vehicleUpgradeGarage", "vehicleHotwire", "vehicleEmpty", "vehicleSyncMileage", "vehicleBreak", "vehicleUpgradeHangar"}
+		"vehicleUpgradeGarage", "vehicleHotwire", "vehicleEmpty", "vehicleSyncMileage", "vehicleBreak", "vehicleUpgradeHangar", "vehicleSaveSpawnPos"}
 	addEventHandler("vehicleBuy", root, bind(self.Event_vehicleBuy, self))
 	addEventHandler("vehicleLock", root, bind(self.Event_vehicleLock, self))
 	addEventHandler("vehicleRequestKeys", root, bind(self.Event_vehicleRequestKeys, self))
@@ -36,6 +36,7 @@ function VehicleManager:constructor()
 	addEventHandler("vehicleSyncMileage", root, bind(self.Event_vehicleSyncMileage, self))
 	addEventHandler("vehicleBreak", root, bind(self.Event_vehicleBreak, self))
 	addEventHandler("vehicleUpgradeHangar", root, bind(self.Event_vehicleUpgradeHangar, self))
+	addEventHandler("vehicleSaveSpawnPos", root, bind(self.Event_vehicleSaveSpawnPos, self))
 
 	-- Check Licenses
 	addEventHandler("onVehicleStartEnter", root,
@@ -121,7 +122,7 @@ function VehicleManager.loadVehicles()
 	local result = sql:queryFetch("SELECT * FROM ??_company_vehicles", sql:getPrefix())
 	for i, row in pairs(result) do
 		local vehicle = createVehicle(row.Model, row.PosX, row.PosY, row.PosZ, 0, 0, row.Rotation)
-		enew(vehicle, CompanyVehicle, tonumber(row.Id), CompanyManager:getSingleton():getFromId(row.Company), row.Color, row.Health, row.PositionType, fromJSON(row.Tunings or "[ [ ] ]"), row.Mileage)
+		enew(vehicle, CompanyVehicle, tonumber(row.Id), CompanyManager:getSingleton():getFromId(row.Company), row.Color, row.Health, row.PositionType, fromJSON(row.Tunings or "[ [ ] ]"), row.Mileage, Vector3(row.SpawnPosX, row.SpawnPosY, row.SpawnPosZ), Vector3(0, 0, row.SpawnRotation))
 		VehicleManager:getSingleton():addRef(vehicle, false)
 	end
 	outputServerLog("Loading faction vehicles")
@@ -411,39 +412,50 @@ function VehicleManager:Event_vehicleRepair()
 end
 
 function VehicleManager:Event_vehicleRespawn()
-	if not instanceof(source, PermanentVehicle, true) then return end
+	if instanceof(source, PermanentVehicle, true) then
+		if source:getOwner() ~= client:getId() and client:getRank() < RANK.Moderator then
+			client:sendError(_("Du bist nicht der Besitzer dieses Fahrzeugs!", client))
+			return
+		end
+		if client:getMoney() < 100 then
+			client:sendError(_("Du hast nicht genügend Geld!", client))
+			return
+		end
+		if source:isInGarage() then
+			fixVehicle(source)
+			client:takeMoney(100)
+			client:sendShortMessage(_("Fahrzeug repariert!", client))
+			return
+		end
+		local occupants = getVehicleOccupants(source)
+		for seat, player in pairs(occupants) do
+			removePedFromVehicle(player)
+		end
 
-	if source:getOwner() ~= client:getId() and client:getRank() < RANK.Moderator then
-		client:sendError(_("Du bist nicht der Besitzer dieses Fahrzeugs!", client))
-		return
-	end
-	if client:getMoney() < 100 then
-		client:sendError(_("Du hast nicht genügend Geld!", client))
-		return
-	end
-	if source:isInGarage() then
-		fixVehicle(source)
-		client:takeMoney(100)
-		client:sendShortMessage(_("Fahrzeug repariert!", client))
-		return
-	end
-	local occupants = getVehicleOccupants(source)
-	for seat, player in pairs(occupants) do
-		removePedFromVehicle(player)
-	end
+		source:respawn()
+		if client:getRank() < RANK.Moderator or source:getOwner() == client:getId() then
+			client:takeMoney(100)
+		end
+		source:fix()
 
-	source:respawn()
-	if client:getRank() < RANK.Moderator or source:getOwner() == client:getId() then
-		client:takeMoney(100)
-	end
-	source:fix()
+		-- Refresh location in the self menu
+		local vehicles = {}
+		for k, vehicle in pairs(self:getPlayerVehicles(client)) do
+			vehicles[vehicle:getId()] = {vehicle, vehicle:getPositionType()}
+		end
+		client:triggerEvent("vehicleRetrieveInfo", vehicles)
+	elseif not instanceof(source, TemporaryVehicle, true) then
+		if instanceof(source, CompanyVehicle, true) then
+			if client:getCompany() == source:getCompany() or client:getRank() >= RANK.Moderator then
+				source:respawn()
+
+				client:sendShortMessage(_("Du hast das Fahrzeug erfolgreich respawnt!", client))
+				return
+			end
+		end
 
-	-- Refresh location in the self menu
-	local vehicles = {}
-	for k, vehicle in pairs(self:getPlayerVehicles(client)) do
-		vehicles[vehicle:getId()] = {vehicle, vehicle:getPositionType()}
+		client:sendError(_("Du darfst dieses Fahrzeug nicht respawnen!", client))
 	end
-	client:triggerEvent("vehicleRetrieveInfo", vehicles)
 end
 
 function VehicleManager:Event_vehicleDelete()
@@ -591,3 +603,12 @@ function VehicleManager:Event_vehicleBreak()
 	-- TODO: The following behavior is pretty bad in terms of security, so fix it asap (without breaking its behavior)
 	source:setBroken(true)
 end
+
+function VehicleManager:Event_vehicleSaveSpawnPos()
+	if instanceof(source, CompanyVehicle, true) then
+		if source:getCompany():getPlayerRank(client) >= CompanyRank.Manager then
+			source.m_SpawnPosition = source:getPosition()
+			source.m_SpawnRotation = source:getRotation()
+		end
+	end
+end
-- 
1.9.5.msysgit.1

